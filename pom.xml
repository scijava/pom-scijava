<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>org.scijava</groupId>
	<artifactId>pom-scijava</artifactId>
	<version>1.156-SNAPSHOT</version>
	<packaging>pom</packaging>

	<name>SciJava Projects</name>
	<description>SciJava aims to provide an overview of available Java libraries for scientific computing. This POM provides a parent from which participating projects can declare their build configurations. It ensures that projects all use a compatible build environment, including Java version, as well as versions of dependencies and plugins.

Projects wishing to use pom-scijava as a parent project need to override the &lt;name&gt;, &lt;description&gt;, &lt;url&gt;, &lt;inceptionYear&gt; &lt;licenses&gt;, &lt;developers&gt;, &lt;organization&gt; and the &lt;scm&gt; sections.</description>
	<url>http://www.scijava.org/</url>
	<inceptionYear>2011</inceptionYear>

	<licenses>
		<license>
			<name>CC0 1.0 Universal License</name>
			<url>http://creativecommons.org/publicdomain/zero/1.0/</url>
			<distribution>repo</distribution>
		</license>
	</licenses>

	<developers>
		<developer>
			<id>ctrueden</id>
			<name>Curtis Rueden</name>
			<email>ctrueden@wisc.edu</email>
			<url>http://loci.wisc.edu/people/curtis-rueden</url>
			<organization>UW-Madison LOCI</organization>
			<organizationUrl>http://loci.wisc.edu/</organizationUrl>
			<roles>
				<role>architect</role>
				<role>developer</role>
			</roles>
			<timezone>-6</timezone>
		</developer>
		<developer>
			<id>dscho</id>
			<name>Johannes Schindelin</name>
			<email>schindelin@wisc.edu</email>
			<url>http://loci.wisc.edu/people/johannes-schindelin</url>
			<organization>UW-Madison LOCI</organization>
			<organizationUrl>http://loci.wisc.edu/</organizationUrl>
			<roles>
				<role>architect</role>
				<role>developer</role>
			</roles>
			<timezone>-6</timezone>
		</developer>
	</developers>

	<properties>
		<!-- If two artifacts on the classpath use two different versions of the
		     same dependency, behavior is inconsistent at best, and often broken.
		     The following properties facilitate consistency of dependency
		     versions between various projects in the SciJava software stack.
		     When possible, we advise using the relevant groupId and version
		     properties for your dependencies rather than hardcoding them. -->

		<!-- Bio-Formats - https://github.com/openmicroscopy/bioformats -->
		<bio-formats.groupId>ome</bio-formats.groupId>
		<bio-formats.version>5.0.1</bio-formats.version>

		<!-- ImageJ - https://github.com/imagej/imagej -->
		<imagej.groupId>net.imagej</imagej.groupId>
		<imagej.version>2.0.0-beta-7.8</imagej.version>

		<!-- ImageJ 1.x - https://github.com/fiji/ImageJA -->
		<imagej1.version>1.48s</imagej1.version>

		<!-- ImageJ 1.x patcher - https://github.com/imagej/ij1-patcher -->
		<ij1-patcher.version>0.3.1</ij1-patcher.version>

		<!-- ImageJ Launcher - https://github.com/imagej/imagej-launcher -->
		<imagej-launcher.version>2.0.3</imagej-launcher.version>

		<!-- ImgLib2 - https://github.com/imglib/imglib -->
		<imglib2.groupId>net.imglib2</imglib2.groupId>
		<imglib2.version>2.0.0-beta-25</imglib2.version>
		<imglib2-ij.version>2.0.0-beta-25</imglib2-ij.version>
		<imglib2-scripting.version>2.0.0-beta-24</imglib2-scripting.version>

		<!-- MiniMaven - https://github.com/imagej/minimaven -->
		<minimaven.groupId>net.imagej</minimaven.groupId>
		<minimaven.version>1.0.2</minimaven.version>

		<!-- NAR Maven plugin - https://github.com/maven-nar/nar-maven-plugin -->
		<nar.groupId>com.github.maven-nar</nar.groupId>
		<nar.version>3.0.0</nar.version>

		<!-- SCIFIO-OME-XMl - https://github.com/scifio/scifio-ome-xml -->
		<scifio-ome-xml.version>0.7.0</scifio-ome-xml.version>

		<!-- SCIFIO - https://github.com/scifio/scifio -->
		<scifio.groupId>io.scif</scifio.groupId>
		<scifio.version>0.10.2</scifio.version>

		<!-- SCIFIO-BF-compat - https://github.com/scifio/scifio-bf-compat -->
		<scifio-bf-compat.version>1.6.1</scifio-bf-compat.version>

		<!-- SCIFIO-LifeSci - https://github.com/scifio/scifio-lifesci -->
		<scifio-lifesci.version>0.4.0</scifio-lifesci.version>

		<!-- SciJava Common - https://github.com/scijava/scijava-common -->
		<scijava-common.groupId>org.scijava</scijava-common.groupId>
		<scijava-common.version>2.11.2</scijava-common.version>

		<!-- Other common project dependencies -->
		<jetty.version>8.0.0.M1</jetty.version>
		<junit.version>4.8.1</junit.version>

		<!-- ImageJ Maven Plugin - https://github.com/imagej/imagej-maven-plugin -->
		<imagej-maven-plugin.version>0.3.1</imagej-maven-plugin.version>

		<!-- JUnit Benchmarks - https://github.com/scijava/junit-benchmarks -->
		<junit-benchmarks.groupId>org.scijava</junit-benchmarks.groupId>
		<junit-benchmarks.version>0.7.3-scijava</junit-benchmarks.version>

		<!-- NB: Avoid platform encoding warning when copying resources. -->
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

		<!-- NB: Specify formatting of the maven.build.timestamp property. -->
		<maven.build.timestamp.format>yyyy-MM-dd'T'HH:mm:ssZ</maven.build.timestamp.format>

		<!-- NB: Override argLine property for extra maven-surefire-plugin args. -->
		<argLine />
	</properties>

	<dependencyManagement>
		<dependencies>
			<!-- SciJava Common - https://github.com/scijava/scijava-common -->
			<dependency>
				<groupId>${scijava-common.groupId}</groupId>
				<artifactId>scijava-common</artifactId>
				<version>${scijava-common.version}</version>
			</dependency>

			<!-- ImgLib2 - https://github.com/imglib/imglib -->
			<dependency>
				<groupId>${imglib2.groupId}</groupId>
				<artifactId>imglib2</artifactId>
				<version>${imglib2.version}</version>
			</dependency>
			<dependency>
				<groupId>${imglib2.groupId}</groupId>
				<artifactId>imglib2-meta</artifactId>
				<version>${imglib2.version}</version>
			</dependency>
			<dependency>
				<groupId>${imglib2.groupId}</groupId>
				<artifactId>imglib2-ops</artifactId>
				<version>${imglib2.version}</version>
			</dependency>
			<dependency>
				<groupId>${imglib2.groupId}</groupId>
				<artifactId>imglib2-realtransform</artifactId>
				<version>${imglib2.version}</version>
			</dependency>
			<dependency>
				<groupId>${imglib2.groupId}</groupId>
				<artifactId>imglib2-ui</artifactId>
				<version>${imglib2.version}</version>
			</dependency>
			<dependency>
				<groupId>${imglib2.groupId}</groupId>
				<artifactId>imglib2-algorithms</artifactId>
				<version>${imglib2.version}</version>
			</dependency>
			<dependency>
				<groupId>${imglib2.groupId}</groupId>
				<artifactId>imglib2-algorithms-gpl</artifactId>
				<version>${imglib2.version}</version>
			</dependency>
			<dependency>
				<groupId>${imglib2.groupId}</groupId>
				<artifactId>imglib2-algorithms-legacy</artifactId>
				<version>${imglib2.version}</version>
			</dependency>
			<dependency>
				<groupId>${imglib2.groupId}</groupId>
				<artifactId>imglib2-ij</artifactId>
				<version>${imglib2-ij.version}</version>
			</dependency>
			<dependency>
				<groupId>${imglib2.groupId}</groupId>
				<artifactId>imglib2-scripting</artifactId>
				<version>${imglib2-scripting.version}</version>
			</dependency>

			<!-- ImageJ - https://github.com/imagej/imagej -->
			<dependency>
				<groupId>${imagej.groupId}</groupId>
				<artifactId>ij-app</artifactId>
				<version>${imagej.version}</version>
			</dependency>
			<dependency>
				<groupId>${imagej.groupId}</groupId>
				<artifactId>ij-core</artifactId>
				<version>${imagej.version}</version>
			</dependency>
			<dependency>
				<groupId>${imagej.groupId}</groupId>
				<artifactId>ij-data</artifactId>
				<version>${imagej.version}</version>
			</dependency>
			<dependency>
				<groupId>${imagej.groupId}</groupId>
				<artifactId>ij-legacy</artifactId>
				<version>${imagej.version}</version>
			</dependency>
			<dependency>
				<groupId>${imagej.groupId}</groupId>
				<artifactId>ij-options</artifactId>
				<version>${imagej.version}</version>
			</dependency>
			<dependency>
				<groupId>${imagej.groupId}</groupId>
				<artifactId>ij-ui</artifactId>
				<version>${imagej.version}</version>
			</dependency>
			<dependency>
				<groupId>${imagej.groupId}</groupId>
				<artifactId>ij-updater-core</artifactId>
				<version>${imagej.version}</version>
			</dependency>
			<dependency>
				<groupId>${imagej.groupId}</groupId>
				<artifactId>ij-commands</artifactId>
				<version>${imagej.version}</version>
			</dependency>
			<dependency>
				<groupId>${imagej.groupId}</groupId>
				<artifactId>ij-platforms</artifactId>
				<version>${imagej.version}</version>
			</dependency>
			<dependency>
				<groupId>${imagej.groupId}</groupId>
				<artifactId>ij-scripting-beanshell</artifactId>
				<version>${imagej.version}</version>
			</dependency>
			<dependency>
				<groupId>${imagej.groupId}</groupId>
				<artifactId>ij-scripting-clojure</artifactId>
				<version>${imagej.version}</version>
			</dependency>
			<dependency>
				<groupId>${imagej.groupId}</groupId>
				<artifactId>ij-scripting-java</artifactId>
				<version>${imagej.version}</version>
			</dependency>
			<dependency>
				<groupId>${imagej.groupId}</groupId>
				<artifactId>ij-scripting-javascript</artifactId>
				<version>${imagej.version}</version>
			</dependency>
			<dependency>
				<groupId>${imagej.groupId}</groupId>
				<artifactId>ij-scripting-jruby</artifactId>
				<version>${imagej.version}</version>
			</dependency>
			<dependency>
				<groupId>${imagej.groupId}</groupId>
				<artifactId>ij-scripting-jython</artifactId>
				<version>${imagej.version}</version>
			</dependency>
			<dependency>
				<groupId>${imagej.groupId}</groupId>
				<artifactId>ij-text</artifactId>
				<version>${imagej.version}</version>
			</dependency>
			<dependency>
				<groupId>${imagej.groupId}</groupId>
				<artifactId>ij-tools</artifactId>
				<version>${imagej.version}</version>
			</dependency>
			<dependency>
				<groupId>${imagej.groupId}</groupId>
				<artifactId>ij-ui-awt</artifactId>
				<version>${imagej.version}</version>
			</dependency>
			<dependency>
				<groupId>${imagej.groupId}</groupId>
				<artifactId>ij-ui-pivot</artifactId>
				<version>${imagej.version}</version>
			</dependency>
			<dependency>
				<groupId>${imagej.groupId}</groupId>
				<artifactId>ij-ui-swing</artifactId>
				<version>${imagej.version}</version>
			</dependency>
			<dependency>
				<groupId>${imagej.groupId}</groupId>
				<artifactId>ij-ui-swt</artifactId>
				<version>${imagej.version}</version>
			</dependency>
			<dependency>
				<groupId>${imagej.groupId}</groupId>
				<artifactId>ij-updater-ssh</artifactId>
				<version>${imagej.version}</version>
			</dependency>
			<dependency>
				<groupId>${imagej.groupId}</groupId>
				<artifactId>ij-updater-webdav</artifactId>
				<version>${imagej.version}</version>
			</dependency>
			<dependency>
				<groupId>${imagej.groupId}</groupId>
				<artifactId>ij-ui-common-awt</artifactId>
				<version>${imagej.version}</version>
			</dependency>
			<dependency>
				<groupId>${imagej.groupId}</groupId>
				<artifactId>ij-util-awt</artifactId>
				<version>${imagej.version}</version>
			</dependency>
			<dependency>
				<groupId>${imagej.groupId}</groupId>
				<artifactId>ij-ui-swing-commands</artifactId>
				<version>${imagej.version}</version>
			</dependency>
			<dependency>
				<groupId>${imagej.groupId}</groupId>
				<artifactId>ij-ui-swing-script-editor</artifactId>
				<version>${imagej.version}</version>
			</dependency>
			<dependency>
				<groupId>${imagej.groupId}</groupId>
				<artifactId>ij-ui-swing-tools</artifactId>
				<version>${imagej.version}</version>
			</dependency>
			<dependency>
				<groupId>${imagej.groupId}</groupId>
				<artifactId>ij-ui-swing-updater</artifactId>
				<version>${imagej.version}</version>
			</dependency>
			<dependency>
				<groupId>${imagej.groupId}</groupId>
				<artifactId>ij-util-swing</artifactId>
				<version>${imagej.version}</version>
			</dependency>

			<!-- ImageJ 1.x - https://github.com/fiji/ImageJA -->
			<dependency>
				<groupId>${imagej.groupId}</groupId>
				<artifactId>ij</artifactId>
				<version>${imagej1.version}</version>
			</dependency>

			<!-- ImageJ 1.x patcher - https://github.com/imagej/ij1-patcher -->
			<dependency>
				<groupId>${imagej.groupId}</groupId>
				<artifactId>ij1-patcher</artifactId>
				<version>${ij1-patcher.version}</version>
			</dependency>

			<!-- ImageJ Launcher - https://github.com/imagej/imagej-launcher -->
			<dependency>
				<groupId>${imagej.groupId}</groupId>
				<artifactId>imagej-launcher</artifactId>
				<version>${imagej-launcher.version}</version>
			</dependency>

			<!-- MiniMaven - https://github.com/imagej/minimaven -->
			<dependency>
				<groupId>${minimaven.groupId}</groupId>
				<artifactId>minimaven</artifactId>
				<version>${minimaven.version}</version>
			</dependency>

			<!-- SCIFIO - https://github.com/scifio/scifio -->
			<dependency>
				<groupId>${scifio.groupId}</groupId>
				<artifactId>scifio</artifactId>
				<version>${scifio.version}</version>
			</dependency>

			<!-- SCIFIO-OME-XML - https://github.com/scifio/scifio-ome-xml -->
			<dependency>
				<groupId>${scifio.groupId}</groupId>
				<artifactId>scifio-ome-xml</artifactId>
				<version>${scifio-ome-xml.version}</version>
			</dependency>

			<!-- SCIFIO-BF-compat - https://github.com/scifio/scifio-bf-compat -->
			<dependency>
				<groupId>${scifio.groupId}</groupId>
				<artifactId>scifio-bf-compat</artifactId>
				<version>${scifio-bf-compat.version}</version>
			</dependency>

			<!-- SCIFIO-LifeSci - https://github.com/scifio/scifio-lifesci -->
			<dependency>
				<groupId>${scifio.groupId}</groupId>
				<artifactId>scifio-lifesci</artifactId>
				<version>${scifio-lifesci.version}</version>
			</dependency>

			<!-- Bio-Formats - https://github.com/openmicroscopy/bioformats -->
			<dependency>
				<groupId>${bio-formats.groupId}</groupId>
				<artifactId>bio-formats_plugins</artifactId>
				<version>${bio-formats.version}</version>
			</dependency>
			<dependency>
				<groupId>${bio-formats.groupId}</groupId>
				<artifactId>formats-api</artifactId>
				<version>${bio-formats.version}</version>
			</dependency>
			<dependency>
				<groupId>${bio-formats.groupId}</groupId>
				<artifactId>formats-bsd</artifactId>
				<version>${bio-formats.version}</version>
			</dependency>
			<dependency>
				<groupId>${bio-formats.groupId}</groupId>
				<artifactId>formats-common</artifactId>
				<version>${bio-formats.version}</version>
			</dependency>
			<dependency>
				<groupId>${bio-formats.groupId}</groupId>
				<artifactId>formats-gpl</artifactId>
				<version>${bio-formats.version}</version>
			</dependency>
			<dependency>
				<groupId>${bio-formats.groupId}</groupId>
				<artifactId>ome-xml</artifactId>
				<version>${bio-formats.version}</version>
			</dependency>

			<!-- JUnit - http://junit.org/ -->
			<dependency>
				<groupId>junit</groupId>
				<artifactId>junit</artifactId>
				<version>${junit.version}</version>
				<scope>test</scope>
			</dependency>

			<!-- JUnit Benchmarks - https://github.com/scijava/junit-benchmarks -->
			<dependency>
				<groupId>${junit-benchmarks.groupId}</groupId>
				<artifactId>junit-benchmarks</artifactId>
				<version>${junit-benchmarks.version}</version>
				<scope>test</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<build>
		<!-- It is nice for "mvn" with no arguments to do something reasonable. -->
		<defaultGoal>install</defaultGoal>

		<plugins>
			<!-- Create -sources.jar when building. -->
			<plugin>
				<artifactId>maven-source-plugin</artifactId>
			</plugin>

			<plugin>
				<artifactId>maven-surefire-plugin</artifactId>
			</plugin>

			<!-- Add Implementation-Build entry to JAR manifest. -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>buildnumber-maven-plugin</artifactId>
			</plugin>

			<!-- Enable 'license:' goals. -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>license-maven-plugin</artifactId>
			</plugin>

			<!-- Enable 'graph:' goals. -->
			<plugin>
				<groupId>org.fusesource.mvnplugins</groupId>
				<artifactId>maven-graph-plugin</artifactId>
			</plugin>

			<!-- Enable copying the artifacts and dependencies by setting
			     the 'imagej.app.directory' property to a valid directory. -->
			<plugin>
				<groupId>${imagej.groupId}</groupId>
				<artifactId>imagej-maven-plugin</artifactId>
				<version>${imagej-maven-plugin.version}</version>
				<executions>
					<execution>
						<id>copy-jars</id>
						<phase>install</phase>
						<goals>
							<goal>copy-jars</goal>
						</goals>
					</execution>
					<execution>
						<id>set-rootdir</id>
						<phase>validate</phase>
						<goals>
							<goal>set-rootdir</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>

		<!-- We use wagon-webdav-jackrabbit 1.0 for deploys, since it is
		     compatible with both Maven 2.2.x and Maven 3.0.x cross-platform. -->
		<extensions>
			<extension>
				<groupId>org.apache.maven.wagon</groupId>
				<artifactId>wagon-webdav-jackrabbit</artifactId>
				<version>1.0</version>
			</extension>
		</extensions>

		<pluginManagement>
			<plugins>
				<plugin>
					<artifactId>maven-assembly-plugin</artifactId>
					<version>2.4</version>
				</plugin>

				<plugin>
					<artifactId>maven-clean-plugin</artifactId>
					<version>2.5</version>
				</plugin>

				<plugin>
					<artifactId>maven-compiler-plugin</artifactId>
					<version>3.1</version>
					<!-- Require the Java 6 platform. -->
					<configuration>
						<source>1.6</source>
						<target>1.6</target>
					</configuration>
				</plugin>

				<plugin>
					<artifactId>maven-dependency-plugin</artifactId>
					<version>2.8</version>
				</plugin>

				<plugin>
					<artifactId>maven-deploy-plugin</artifactId>
					<version>2.8.1</version>
				</plugin>

				<plugin>
					<artifactId>maven-install-plugin</artifactId>
					<version>2.5.1</version>
				</plugin>

				<plugin>
					<artifactId>maven-jar-plugin</artifactId>
					<version>2.4</version>
					<!-- Always add classpath to JAR manifests. -->
					<configuration>
						<archive>
							<manifest>
								<addClasspath>true</addClasspath>
								<addDefaultImplementationEntries>true</addDefaultImplementationEntries>
								<addDefaultSpecificationEntries>true</addDefaultSpecificationEntries>
							</manifest>
							<manifestEntries>
								<!-- Add SCM revision from buildnumber plugin, if available. -->
								<Implementation-Build>${buildNumber}</Implementation-Build>
								<!-- Add a formatted timestamp for the build. -->
								<Implementation-Date>${maven.build.timestamp}</Implementation-Date>
							</manifestEntries>
						</archive>
					</configuration>
				</plugin>

				<plugin>
					<artifactId>maven-javadoc-plugin</artifactId>
					<!-- NB: The same version declaration and configuration block also
					     appears in the <reporting> section, and must be kept in sync. -->
					<version>2.9.1</version>
					<configuration>
						<maxmemory>1024m</maxmemory>
						<!-- Workaround for javadoc bug when classes in the default
						     package access classes from non-default packages. See:
						     http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=5101868 -->
						<use>false</use>
						<links>
							<!-- Java 6 -->
							<link>http://docs.oracle.com/javase/6/docs/api/</link>

							<!-- Core SciJava projects -->
							<!-- Bio-Formats -->
							<link>http://hudson.openmicroscopy.org.uk/job/BIOFORMATS-trunk/javadoc/</link>
							<!-- Fiji -->
							<link>http://jenkins.imagej.net/job/Fiji-javadoc/javadoc/</link>
							<!-- ImageJ1 -->
							<link>http://jenkins.imagej.net/job/ImageJ1-javadoc/javadoc/</link>
							<!-- ImageJ2 -->
							<link>http://jenkins.imagej.net/job/ImageJ-daily/javadoc/</link>
							<!-- ImgLib2 -->
							<link>http://jenkins.imagej.net/job/ImgLib-daily/javadoc/</link>
							<!-- SCIFIO -->
							<link>http://jenkins.imagej.net/job/SCIFIO-javadoc/javadoc/</link>
							<!-- SciJava Common -->
							<link>http://jenkins.imagej.net/job/SciJava-common-javadoc/javadoc/</link>

							<!-- Third party dependencies -->
							<!-- Apache Pivot -->
							<link>http://pivot.apache.org/2.0.3/docs/api/</link>
							<!-- Eclipse -->
							<link>http://help.eclipse.org/indigo/topic/org.eclipse.platform.doc.isv/reference/api/</link>
							<!-- Java3D -->
							<link>http://download.java.net/media/java3d/javadoc/1.5.2/</link>
							<!-- Javassist -->
							<link>http://www.csg.ci.i.u-tokyo.ac.jp/~chiba/javassist/html/</link>
							<!-- JHotDraw -->
							<link>http://www.randelshofer.ch/oop/jhotdraw/JavaDoc/</link>
							<!-- MPI-CBG -->
							<link>http://jenkins.imagej.net/view/Fiji/job/Saalfeld-MPICBG-Maven/javadoc/</link>
						</links>
					</configuration>
				</plugin>

				<plugin>
					<artifactId>maven-plugin-plugin</artifactId>
					<version>3.2</version>
				</plugin>

				<plugin>
					<artifactId>maven-release-plugin</artifactId>
					<version>2.5</version>
				</plugin>

				<plugin>
					<artifactId>maven-resources-plugin</artifactId>
					<version>2.6</version>
				</plugin>

				<plugin>
					<artifactId>maven-site-plugin</artifactId>
					<version>3.3</version>
				</plugin>

				<plugin>
					<artifactId>maven-source-plugin</artifactId>
					<version>2.2.1</version>
					<!-- Build source artifact in addition to main artifact. -->
					<executions>
						<execution>
							<goals>
								<goal>jar</goal>
							</goals>
						</execution>
					</executions>
				</plugin>

				<plugin>
					<artifactId>maven-surefire-plugin</artifactId>
					<version>2.17</version>
					<!-- Make sure that:
					     A) unit tests run with sufficient RAM allocated;
					     B) unit tests do not pop a Java dock icon on OS X;
					     C) additional args can be given via argLine property;

					     Sometimes, one needs to pass JVM options to the JVM
					     running the unit tests, such as -verbose:class or
					     -Djava.awt.headless=true.

					     Unfortunately, maven-surefire does not expose a
					     command-line interface to do so, therefore let's
					     simulate it by re-using the property 'argLine' to
					     specify those options. -->
					<configuration>
						<argLine>-Xms512m -Xmx512m -Dapple.awt.UIElement="true" ${argLine}</argLine>
					</configuration>
				</plugin>

				<!-- Build Number Maven plugin -
				     http://mojo.codehaus.org/buildnumber-maven-plugin/
				     This plugin embeds a build number in the JAR manifest. -->
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>buildnumber-maven-plugin</artifactId>
					<version>1.2</version>
					<!-- Record SCM revision in manifest. -->
					<executions>
						<execution>
							<phase>validate</phase>
							<goals>
								<goal>create</goal>
							</goals>
						</execution>
					</executions>
					<configuration>
						<getRevisionOnlyOnce>true</getRevisionOnlyOnce>
						<revisionOnScmFailure>UNKNOWN</revisionOnScmFailure>
					</configuration>
				</plugin>

				<!-- Exec Maven plugin -
				http://mojo.codehaus.org/exec-maven-plugin/
				This plugin launches a Java class using Maven. -->
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>exec-maven-plugin</artifactId>
					<version>1.2.1</version>
				</plugin>

				<!-- License Maven plugin -
				     http://mojo.codehaus.org/license-maven-plugin/
				     This plugin manages project licenses and source file headers. -->
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>license-maven-plugin</artifactId>
					<version>1.6</version>
					<configuration>
						<projectName>${project.description}</projectName>
						<addJavaLicenseAfterPackage>false</addJavaLicenseAfterPackage>
						<canUpdateDescription>true</canUpdateDescription>
						<canUpdateCopyright>true</canUpdateCopyright>
						<extraExtensions>
							<bsh>java</bsh>
							<config>properties</config>
							<ijm>java</ijm>
						</extraExtensions>
					</configuration>
				</plugin>

				<!-- Versions Maven plugin -
				     http://mojo.codehaus.org/versions-maven-plugin/
				     Check for new plugin versions using
				     "mvn versions:display-plugin-updates" -->
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>versions-maven-plugin</artifactId>
					<version>2.1</version>
				</plugin>

				<!-- Maven Graph Plugin -
				     http://mvnplugins.fusesource.org/maven/1.10/maven-graph-plugin/
				     Generate a dependency graph using "mvn graph:reactor" -->
				<plugin>
					<groupId>org.fusesource.mvnplugins</groupId>
					<artifactId>maven-graph-plugin</artifactId>
					<version>1.30</version>
					<configuration>
						<hideScopes>provided,runtime,system,test</hideScopes>
						<hideTransitive>true</hideTransitive>
						<label>Dependency Graph for ${project.name}</label>
						<target>${project.build.directory}/dependency-graph.dot</target>
					</configuration>
				</plugin>

				<!-- NAR Maven plugin - https://github.com/maven-nar/nar-maven-plugin -->
				<plugin>
					<groupId>${nar.groupId}</groupId>
					<artifactId>nar-maven-plugin</artifactId>
					<version>${nar.version</version>
				</plugin>

				<!-- Eclipse-specific configuration

				     With a recent version of m2e, Eclipse's Maven binding, it is no
				     longer enough to configure plugins; they will be ignored by
				     default. But we really want the buildnumber and the jar plugin to
				     do their job. So now we have to add lifecycle mappings in addition
				     to configuring the plugins.

				     Let's hope that m2e remains the only IDE Maven binding that
				     requires such a lot of additional work just to get the same result
				     as plain Maven would produce out of the box. -->
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>org.codehaus.mojo</groupId>
										<artifactId>buildnumber-maven-plugin</artifactId>
										<versionRange>[1.0,)</versionRange>
										<goals>
											<goal>create</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<execute>
											<runOnIncremental>true</runOnIncremental>
											<runOnConfiguration>true</runOnConfiguration>
										</execute>
									</action>
								</pluginExecution>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>org.apache.maven.plugins</groupId>
										<artifactId>maven-jar-plugin</artifactId>
										<versionRange>[2.0,)</versionRange>
										<goals>
											<goal>jar</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<execute>
											<runOnIncremental>true</runOnIncremental>
											<runOnConfiguration>true</runOnConfiguration>
										</execute>
									</action>
								</pluginExecution>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>net.imagej</groupId>
										<artifactId>imagej-maven-plugin</artifactId>
										<versionRange>[0.1.0,)</versionRange>
										<goals>
											<goal>set-rootdir</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore />
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>

	<reporting>
		<plugins>
			<!-- Generate javadocs as part of site generation. -->
			<plugin>
				<artifactId>maven-javadoc-plugin</artifactId>
				<!-- NB: The following version declaration and configuration block
				     are fully replicated from the pluginManagement section. This
				     is necessary because many versions of maven-site-plugin
				     (including 3.3) do not respect the pluginManagement values.
				     See: http://jira.codehaus.org/browse/MSITE-443
				     While the maven-site-plugin documentation states that it
				     "search[es] the same groupId/artifactId in the
				     build.pluginManagement.plugins section", this claim
				     unfortunately does not seem to reflect reality. -->
				<version>2.9.1</version>
				<configuration>
					<maxmemory>1024m</maxmemory>
					<!-- Workaround for javadoc bug when classes in the default
					     package access classes from non-default packages. See:
					     http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=5101868 -->
					<use>false</use>
					<links>
						<!-- Java 6 -->
						<link>http://docs.oracle.com/javase/6/docs/api/</link>

						<!-- Core SciJava projects -->
						<!-- Bio-Formats -->
						<link>http://hudson.openmicroscopy.org.uk/job/BIOFORMATS-trunk/javadoc/</link>
						<!-- Fiji -->
						<link>http://jenkins.imagej.net/job/Fiji-javadoc/javadoc/</link>
						<!-- ImageJ1 -->
						<link>http://jenkins.imagej.net/job/ImageJ1-javadoc/javadoc/</link>
						<!-- ImageJ2 -->
						<link>http://jenkins.imagej.net/job/ImageJ-daily/javadoc/</link>
						<!-- ImgLib2 -->
						<link>http://jenkins.imagej.net/job/ImgLib-daily/javadoc/</link>
						<!-- SCIFIO -->
						<link>http://jenkins.imagej.net/job/SCIFIO-javadoc/javadoc/</link>
						<!-- SciJava Common -->
						<link>http://jenkins.imagej.net/job/SciJava-common-javadoc/javadoc/</link>

						<!-- Third party dependencies -->
						<!-- Apache Pivot -->
						<link>http://pivot.apache.org/2.0.3/docs/api/</link>
						<!-- Eclipse -->
						<link>http://help.eclipse.org/indigo/topic/org.eclipse.platform.doc.isv/reference/api/</link>
						<!-- Java3D -->
						<link>http://download.java.net/media/java3d/javadoc/1.5.2/</link>
						<!-- Javassist -->
						<link>http://www.csg.ci.i.u-tokyo.ac.jp/~chiba/javassist/html/</link>
						<!-- JHotDraw -->
						<link>http://www.randelshofer.ch/oop/jhotdraw/JavaDoc/</link>
						<!-- MPI-CBG -->
						<link>http://jenkins.imagej.net/view/Fiji/job/Saalfeld-MPICBG-Maven/javadoc/</link>
					</links>
				</configuration>
			</plugin>
		</plugins>
	</reporting>

	<organization>
		<name>SciJava</name>
		<url>http://www.scijava.org/</url>
	</organization>

	<scm>
		<connection>scm:git:git://github.com/scijava/pom-scijava</connection>
		<developerConnection>scm:git:git@github.com:scijava/pom-scijava</developerConnection>
		<tag>HEAD</tag>
		<url>https://github.com/scijava/pom-scijava</url>
	</scm>

	<prerequisites>
		<maven>2.2.1</maven>
	</prerequisites>

	<profiles>
		<!-- These developer profiles make it easy to pin to SNAPSHOT versions.
		     Add an empty dev.<organization> file to the relevant component,
		     or globally in your ~/.scijava directory, and dependencies will
		     automatically update! You may also need to refresh your IDE;
		     e.g., in Eclipse: right click, Maven > Update Project... -->
		<profile>
			<id>dev.imagej</id>
			<activation>
				<file>
					<exists>${user.dir}/.scijava/dev.imagej</exists>
				</file>
			</activation>
			<properties>
				<imagej.version>2.0.0-SNAPSHOT</imagej.version>
				<ij1-patcher.version>0.3.2-SNAPSHOT</ij1-patcher.version>
				<imagej-launcher.version>2.0.4-SNAPSHOT</imagej-launcher.version>
				<minimaven.version>1.0.3-SNAPSHOT</minimaven.version>
			</properties>
		</profile>
		<profile>
			<id>dev.imglib2</id>
			<activation>
				<file>
					<exists>${user.dir}/.scijava/dev.imglib2</exists>
				</file>
			</activation>
			<properties>
				<imglib2.version>2.0.0-SNAPSHOT</imglib2.version>
				<imglib2-ij.version>2.0.0-SNAPSHOT</imglib2-ij.version>
				<imglib2-scripting.version>2.0.0-SNAPSHOT</imglib2-scripting.version>
			</properties>
		</profile>
		<profile>
			<id>dev.ome</id>
			<activation>
				<file>
					<exists>${user.dir}/.scijava/dev.ome</exists>
				</file>
			</activation>
			<properties>
				<bio-formats.version>5.0.2-SNAPSHOT</bio-formats.version>
			</properties>
		</profile>
		<profile>
			<id>dev.scijava</id>
			<activation>
				<file>
					<exists>${user.dir}/.scijava/dev.scijava</exists>
				</file>
			</activation>
			<properties>
				<scijava-common.version>2.14.1-SNAPSHOT</scijava-common.version>
			</properties>
		</profile>
		<profile>
			<id>dev.scifio</id>
			<activation>
				<file>
					<exists>${user.dir}/.scijava/dev.scifio</exists>
				</file>
			</activation>
			<properties>
				<scifio-ome-xml.version>0.7.1-SNAPSHOT</scifio-ome-xml.version>
				<scifio.version>0.10.3-SNAPSHOT</scifio.version>
				<scifio-bf-compat.version>1.6.2-SNAPSHOT</scifio-bf-compat.version>
				<scifio-lifesci.version>0.4.1-SNAPSHOT</scifio-lifesci.version>
			</properties>
		</profile>

		<!-- Build test artifact when tests are present. -->
		<profile>
			<id>test-jar</id>
			<activation>
				<file>
					<!-- NB: Cannot use ${project.build.testSourceDirectory} because
					     Maven only limitedly interpolates this section of the POM.
					     See: http://maven.apache.org/pom.html#Activation -->
					<exists>${basedir}/src/test/java</exists>
				</file>
			</activation>
			<build>
				<plugins>
					<plugin>
						<artifactId>maven-jar-plugin</artifactId>
						<executions>
							<execution>
								<goals>
									<goal>test-jar</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<!-- Run integration tests when "-P run-its" is passed.
		     This works using the maven-invoker-plugin. -->
		<profile>
			<id>run-its</id>
			<build>
				<defaultGoal>integration-test</defaultGoal>
				<plugins>
					<plugin>
						<artifactId>maven-invoker-plugin</artifactId>
						<version>1.8</version>
						<configuration>
							<debug>${invoker.debug}</debug>
							<showErrors>true</showErrors>
							<streamLogs>true</streamLogs>
							<projectsDirectory>src/it</projectsDirectory>
							<cloneProjectsTo>${project.build.directory}/it</cloneProjectsTo>
							<pomIncludes>
								<pomInclude>*/pom.xml</pomInclude>
							</pomIncludes>
							<settingsFile>src/it/settings.xml</settingsFile>
							<localRepositoryPath>${project.build.directory}/local-repo</localRepositoryPath>
							<preBuildHookScript>setup.bsh</preBuildHookScript>
							<postBuildHookScript>verify.bsh</postBuildHookScript>
						</configuration>
						<executions>
							<execution>
								<id>integration-test</id>
								<goals>
									<goal>install</goal>
									<goal>run</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<!-- This profile enables deployment to the ImageJ Maven repository. -->
		<profile>
			<id>deploy-to-imagej</id>
			<distributionManagement>
				<repository>
					<id>imagej.releases</id>
					<name>ImageJ Releases Repository</name>
					<url>dav:http://maven.imagej.net/content/repositories/releases</url>
				</repository>
				<snapshotRepository>
					<id>imagej.snapshots</id>
					<name>ImageJ Snapshots Repository</name>
					<url>dav:http://maven.imagej.net/content/repositories/snapshots</url>
				</snapshotRepository>
			</distributionManagement>
		</profile>

		<!-- This profile enables releasing to the OSS Sonatype repository. -->
		<profile>
			<id>sonatype-oss-release</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.sonatype.plugins</groupId>
						<artifactId>nexus-staging-maven-plugin</artifactId>
						<version>1.6</version>
						<extensions>true</extensions>
						<configuration>
							<serverId>sonatype-nexus-releases</serverId>
							<nexusUrl>https://oss.sonatype.org/</nexusUrl>
							<autoReleaseAfterClose>true</autoReleaseAfterClose>
							<!--
							By having no explicit stagingProfileId, we use
							Staging V2 in "auto" mode, profile will be
							matched server side
							-->
						</configuration>
					</plugin>
					<plugin>
						<inherited>true</inherited>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-deploy-plugin</artifactId>
						<configuration>
							<skip>true</skip>
						</configuration>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-gpg-plugin</artifactId>
						<version>1.5</version>
						<executions>
							<execution>
								<id>sign-artifacts</id>
								<phase>verify</phase>
								<goals>
									<goal>sign</goal>
								</goals>
							</execution>
						</executions>
						<configuration>
							<useAgent>true</useAgent>
						</configuration>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-source-plugin</artifactId>
						<executions>
							<execution>
								<id>attach-sources</id>
								<goals>
									<goal>jar</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-javadoc-plugin</artifactId>
						<executions>
							<execution>
								<id>attach-javadocs</id>
								<goals>
									<goal>jar</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>

			<repositories>
				<repository>
					<id>sonatype-nexus-snapshots</id>
					<name>Sonatype Nexus Snapshots</name>
					<url>https://oss.sonatype.org/content/repositories/snapshots</url>
					<releases>
						<enabled>false</enabled>
					</releases>
					<snapshots>
						<enabled>true</enabled>
					</snapshots>
				</repository>
				<repository>
					<id>sonatype-nexus-releases</id>
					<name>Sonatype Nexus Releases</name>
					<url>https://oss.sonatype.org/content/repositories/releases</url>
					<releases>
						<enabled>true</enabled>
					</releases>
					<snapshots>
						<enabled>false</enabled>
					</snapshots>
				</repository>
			</repositories>

			<distributionManagement>
				<snapshotRepository>
					<id>sonatype-nexus-snapshots</id>
					<name>Sonatype Nexus Snapshots</name>
					<url>https://oss.sonatype.org/content/repositories/snapshots/</url>
				</snapshotRepository>
				<repository>
					<id>sonatype-nexus-staging</id>
					<name>Nexus Release Repository</name>
					<url>https://oss.sonatype.org/service/local/staging/deploy/maven2/</url>
				</repository>
			</distributionManagement>
		</profile>
	</profiles>

</project>
